import { createContext, useContext, useState, useEffect } from "react";
import { myAxios } from "./MyAxios"; // Helyes import
 
// Kontextus l√©trehoz√°sa
const AdminContext = createContext();
 
// Kontextus provider komponens
export function AdminProvider({ children }) {
  const [termekek, setTermekek] = useState([]);
 
  // Term√©kek bet√∂lt√©se az API-b√≥l
  useEffect(() => {
    fetchTermekek();
  }, []);
 
  const fetchTermekek = async () => {
    try {
      const response = await myAxios.get("api/termekek");
      console.log("Backend v√°lasz:", response.data);
      setTermekek(response.data);
    } catch (error) {
      console.error("Hiba a term√©kek bet√∂lt√©sekor:", error);
    }
  };
 
 
  const postData = async (url, ujTermek) => {
    try {
      // üîπ El≈ësz√∂r k√©rd le a CSRF tokent
      await myAxios.get("/sanctum/csrf-cookie");
 
      // üîπ Ezut√°n k√ºldd el a term√©k adatokat
      const response = await myAxios.post(url, ujTermek);
      console.log("Sikeres term√©kfelt√∂lt√©s:", response.data);
 
      fetchTermekek(); // Friss√≠ts√ºk a term√©kek list√°j√°t
    } catch (error) {
      console.error("Hiba t√∂rt√©nt a term√©k felt√∂lt√©sekor:", error);
    }
  };
 
 
 
 
  // **Term√©k t√∂rl√©se**
  const torol = async (id) => {
    if (!id) {
      console.error("Nincs term√©k ID megadva!");
      return;
    }
 
    try {
      console.log("T√∂rl√©s ID:", id);
      await myAxios.delete(`api/termekek/${id}`);
 
      // Friss√≠tj√ºk a term√©kek list√°j√°t √∫gy, hogy kisz≈±rj√ºk a t√∂r√∂lt elemet
      setTermekek((prevTermekek) => prevTermekek.filter(termek => termek.termek_id !== id));
      //setTermekek((prev) => prev.filter(termek => termek.termek_id !== id));

     
    } catch (error) {
      console.error("Hiba t√∂rt√©nt a t√∂rl√©s sor√°n:", error);
    }
  };
 

  
 
 
  return (
    <AdminContext.Provider value={{ termekek, torol,  fetchTermekek, postData }}>
      {children}
    </AdminContext.Provider>
  );
}
 
// Hook az egyszer≈±bb haszn√°lathoz
export function useAdminContext() {
  return useContext(AdminContext);
}